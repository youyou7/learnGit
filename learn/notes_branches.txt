分支（branch）


1 概述
	例如：你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作


2 创建并切换
	① 创建：	git branch <name>
	   切换：	git checkout <name>
	② 创建并切换：	git checkout -b <name>


3 查看分支	git branch，列出所有分支，当前分支前标了一个“*”


4 合并分支	git merge <name>	合并指定分支到当前分支


5 删除分支	git branch -d <name>


6 解决冲突	手动解决后提交


7 管理策略	git merge --no-ff -m "merge with no-ff" <name>	使用非fast forward方式与指定分支合并
	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

（1）分支策略：
	① master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	② 干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
	③ 每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。


8 bug分支
	① 保留工作现场，② 切换回主分支，③ 创建bug解决分支，④ 解决问题后提交文件，⑤ 切换回主分支，⑥ 合并bug分支与主分支，并删除bug解决分支，⑦ 切换回工作分支，⑧ 恢复工作现场

	（1）git stash		储藏当前工作现场，以便修复bug后恢复
	（2）git stash list	查看所有储存的工作现场
	（3）git stash pop	恢复工作现场，同时删除了储存的工作现场
	     git stash apply stash@{0}	恢复指定的工作现场


9 feature分支
	添加新功能时，不能因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，开发完成后，合并并删除该feature分支。
